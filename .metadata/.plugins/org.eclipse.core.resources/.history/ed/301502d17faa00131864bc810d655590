package uk.ac.cam.oda22.core;

import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.util.ArrayList;
import java.util.List;

import uk.ac.cam.oda22.core.logging.Log;
import uk.ac.cam.oda22.pathplanning.Path;

/**
 * @author Oliver
 * 
 */
public final class MathExtended {

	public static boolean approxEqual(double m, double n,
			double fractionalError, double absoluteError) {
		if (Math.abs(n - m) <= absoluteError) {
			return true;
		}

		if (m != 0 && n != 0) {
			return Math.abs(1 - (m / n)) <= fractionalError;
		}

		return false;
	}

	public static boolean approxEqual(Point2D p, Point2D q,
			double fractionalError, double absoluteError) {
		return approxEqual(p.getX(), q.getX(), fractionalError, absoluteError)
				&& approxEqual(p.getY(), q.getY(), fractionalError,
						absoluteError);
	}

	public static boolean approxEqual(Line2D l, Line2D m,
			double fractionalError, double absoluteError) {
		if (approxEqual(l.getP1(), m.getP1(), fractionalError, absoluteError)
				&& approxEqual(l.getP2(), m.getP2(), fractionalError,
						absoluteError)) {
			return true;
		}

		if (approxEqual(l.getP1(), m.getP2(), fractionalError, absoluteError)
				&& approxEqual(l.getP2(), m.getP1(), fractionalError,
						absoluteError)) {
			return true;
		}

		return false;
	}

	public static double max(double d1, double d2, double... ds) {
		double maxValue = Math.max(d1, d2);

		for (double d : ds) {
			maxValue = Math.max(maxValue, d);
		}

		return maxValue;
	}

	public static double min(double d1, double d2, double... ds) {
		double minValue = Math.min(d1, d2);

		for (double d : ds) {
			minValue = Math.min(minValue, d);
		}

		return minValue;
	}

	/**
	 * Checks if two numbers have the same sign or not.
	 * 
	 * @return true if the numbers have the same sign, false otherwise
	 */
	public static boolean sameSign(double m, double n) {
		return (m >= 0 && n >= 0) || (m <= 0 && n <= 0);
	}

	public static double length(double w, double h) {
		return Math.sqrt((w * w) + (h * h));
	}

	public static double length(Line2D l) {
		return length(l.getX2() - l.getX1(), l.getY2() - l.getY1());
	}

	public static double getRadius(double w, double h) {
		return length(w, h) / 2;
	}

	/**
	 * Gets the shortest angular change from one angle to another.
	 * 
	 * @param radsFrom
	 * @param radsTo
	 * @return angular change
	 */
	public static double getAngularChange(double radsFrom, double radsTo) {
		if (radsFrom != Double.NaN && radsTo != Double.NaN) {
			return normaliseAngle(radsTo - radsFrom);
		} else {
			return Double.NaN;
		}
	}

	/**
	 * Gets the shortest angular change from one vector to another.
	 * 
	 * @param vectorFrom
	 * @param vectorTo
	 * @return angular change
	 */
	public static double getAngularChange(Vector2D vectorFrom, Vector2D vectorTo) {
		if (!vectorFrom.isZeroVector() && !vectorTo.isZeroVector()) {
			return getAngularChange(vectorFrom.getAngle(), vectorTo.getAngle());
		} else {
			return Double.NaN;
		}
	}

	/**
	 * Gets the shortest angular change from one angle to another, rotating in a
	 * particular direction. This returns a value in the range [0, 2*pi)
	 * 
	 * @param radsFrom
	 * @param radsTo
	 * @param clockwise
	 * @return angular change
	 */
	public static double getAngularChange(double radsFrom, double radsTo,
			boolean clockwise) {
		if (radsFrom != Double.NaN && radsTo != Double.NaN) {
			double angle = normaliseAngle(radsTo - radsFrom);

			// Check if the angle is for rotating counter-clockwise, but we
			// require clockwise rotation. Note that this would be an angle in
			// the range [pi, 2*pi).
			if (clockwise && angle > 0) {
				return (2 * Math.PI) - angle;
			}

			// Check if the angle is for rotating clockwise, but we require
			// counter-clockwise rotation. Note that this would be an angle in
			// the range [pi, 2*pi).
			if (!clockwise && angle < 0) {
				return angle + (2 * Math.PI);
			}

			// Return the absolute value of the angle, to cover for the case of
			// clockwise rotation.
			return Math.abs(angle);
		} else {
			return Double.NaN;
		}
	}

	/**
	 * Gets the shortest angular change from one vector to another, rotating in
	 * a particular direction. This returns a value in the range [0, 2*pi)
	 * 
	 * @param vectorFrom
	 * @param vectorTo
	 * @return angular change
	 */
	public static double getAngularChange(Vector2D vectorFrom,
			Vector2D vectorTo, boolean clockwise) {
		if (!vectorFrom.isZeroVector() && !vectorTo.isZeroVector()) {
			return getAngularChange(vectorFrom.getAngle(), vectorTo.getAngle(),
					clockwise);
		} else {
			return Double.NaN;
		}
	}

	/**
	 * Normalises an angle to give a value in the range (-pi, +pi].
	 * 
	 * @param rads
	 * @return normalised angle
	 */
	public static double normaliseAngle(double rads) {
		double twoPi = 2 * Math.PI;

		double normalisedAngle = rads % twoPi;

		normalisedAngle = (normalisedAngle + twoPi) % twoPi;

		if (normalisedAngle > Math.PI) {
			normalisedAngle -= twoPi;
		}

		return normalisedAngle;
	}

	/**
	 * Checks if 'a' lies between r1 and r2, where r1 and r2 are unordered.
	 * 
	 * @param a
	 * @param r1
	 * @param r2
	 * @return true if 'a' lies between r1 and r2, and false otherwise
	 */
	public static boolean inRange(double a, double r1, double r2,
			boolean strictInequality) {
		double min = Math.min(r1, r2);
		double max = Math.max(r1, r2);

		if (strictInequality) {
			return a > min && a < max;
		} else {
			return a >= min && a <= max;
		}
	}

	public static PointOnLineResult pointOnLine(Point2D p, Line2D l) {
		// Check if the point is at the first endpoint.
		if (p.equals(l.getP1())) {
			return PointOnLineResult.AT_ENDPOINT;
		}

		// Check if the point is at the second endpoint.
		if (p.equals(l.getP2())) {
			return PointOnLineResult.AT_ENDPOINT;
		}

		// If the line is vertical.
		if (l.getX2() == l.getX1()) {
			// Check if the point has the same x-coordinate.
			if (p.getX() == l.getX1()) {
				// Check if the point lies within the line.
				if (inRange(p.getY(), l.getY1(), l.getY2(), true)) {
					return PointOnLineResult.WITHIN_LINE;
				}
			}
		} else {
			// Calculate the gradient of the line.
			double g = (l.getY2() - l.getY1()) / (l.getX2() - l.getX1());

			// Calculate the y value for the point given its x value if it were
			// on the line.
			double y = l.getY1() + (g * (p.getX() - l.getX1()));

			// Check if the point is on the line.
			if (MathExtended.approxEqual(y, p.getY(), 0.00001, 0.00001)) {
				// If the point is also within the line's bounds.
				if (inRange(p.getX(), l.getX1(), l.getX2(), true)) {
					return PointOnLineResult.WITHIN_LINE;
				}
			}
		}

		return PointOnLineResult.NONE;
	}

	public static PointOnLineResult pointOnPath(Point2D point, Path path) {
		List<Line2D> edges = path.getEdges();

		if (edges.size() == 0) {
			return PointOnLineResult.NONE;
		}

		Point2D startPoint = edges.get(0).getP1();
		Point2D endPoint = edges.get(edges.size() - 1).getP2();

		// Check if the point lies at one of the ends of the path.
		// Note that the point could still lie within the path.
		boolean pointAtEndPoint = point.equals(startPoint)
				|| point.equals(endPoint);

		// For each segment of the path, check if the point lies on it.
		for (int i = 0; i < edges.size(); i++) {
			Line2D edge = edges.get(i);

			// Check if the point on the line.
			PointOnLineResult r = pointOnLine(point, edge);

			if (i == 0 || i == edges.size() - 1) {
				/*
				 * The line is at the end of the path so only has one joint.
				 */

				boolean atJoint = (i == 0) ? edge.getP2().equals(point) : edge
						.getP1().equals(point);

				// Check if the point lies within the line, or at a joint.
				if (r == PointOnLineResult.WITHIN_LINE
						|| (edges.size() >= 2 && atJoint)) {
					return PointOnLineResult.WITHIN_LINE;
				}
			} else {
				/*
				 * The line is not at the end of the path so has two joints.
				 */

				// Check if the point lies anywhere on the line.
				if (r != PointOnLineResult.NONE) {
					return PointOnLineResult.WITHIN_LINE;
				}
			}
		}

		return pointAtEndPoint ? PointOnLineResult.AT_ENDPOINT
				: PointOnLineResult.NONE;
	}

	public static boolean loosePointOnLine(Point2D p, Line2D l) {
		return pointOnLine(p, l) != PointOnLineResult.NONE;
	}

	/**
	 * Checks if a joint crosses a path. This distinguishes between line
	 * segments which cross paths and joints which touch paths.
	 * 
	 * @param point
	 * @param path
	 * @param prevPoint
	 * @param nextPoint
	 * @return
	 */
	public static boolean strictJointCrossesPath(Point2D point, Path path,
			Point2D prevPoint, Point2D nextPoint) {
		List<Line2D> edges = path.getEdges();

		if (edges.size() == 0) {
			return false;
		}

		Point2D startPoint = edges.get(0).getP1();
		Point2D endPoint = edges.get(edges.size() - 1).getP2();

		// Check if the point lies at one of the ends of the path.
		// Note that the joint could still lie within the path.
		boolean pointAtEndPoint = point.equals(startPoint)
				|| point.equals(endPoint);

		// For each segment of the path, check if the point lies on it.
		for (int i = 0; i < edges.size(); i++) {
			Line2D edge = edges.get(i);

			// Check if the point on the line.
			PointOnLineResult r = pointOnLine(point, edge);

			boolean atJoint = false;

			if (i == 0 || i == edges.size() - 1) {
				/*
				 * The line is at the end of the path, so only has one joint.
				 */

				// Check if the point lies within the line.
				if (r == PointOnLineResult.WITHIN_LINE) {
					return true;
				}

				// Note that path joints should only be checked at the end of
				// edges.
				atJoint = (r == PointOnLineResult.AT_ENDPOINT)
						&& ((i == 0) ? edge.getP2().equals(point) : false);
			} else {
				/*
				 * The line is not at the end of the path, so has two joints.
				 */

				// Check if the point lies within the line.
				if (r == PointOnLineResult.WITHIN_LINE) {
					return true;
				}

				// Note that path joints should only be checked at the end of
				// edges.
				atJoint = (r == PointOnLineResult.AT_ENDPOINT)
						&& edge.getP2().equals(point);
			}

			Point2D prevPathPoint;
			Point2D nextPathPoint;

			// Get the previous and next points on the path at the intersection
			// point.
			if (atJoint) {
				/*
				 * Note that the path joint is at the end of the edge.
				 */

				// Get the first point of the current edge.
				prevPathPoint = edge.getP1();

				if (i == edges.size() - 1) {
					Log.warning("Joints should be checked at the end of edges only.");
				}

				// Get the second point of the next edge.
				nextPathPoint = edges.get(i + 1).getP2();
			} else {
				// Get the endpoints of the current edge.
				prevPathPoint = edge.getP1();
				nextPathPoint = edge.getP2();
			}

			/*
			 * Check for crossing. Use the shortest angle between points around
			 * the intersection as a check for whether or not the joint crosses
			 * the path. If the joint crosses the path then the rotation from
			 * one joint edge to the other crosses exactly one of the path
			 * edges. If neither or both of the path edges lie within the
			 * shortest rotation, then the joint only touches the path edge(s).
			 */

			// Get the vectors for the joint.
			Vector2D vj1 = new Vector2D(point, prevPoint);
			Vector2D vj2 = new Vector2D(point, nextPoint);

			// Get the vectors for the path edge(s).
			Vector2D vp1 = new Vector2D(point, prevPathPoint);
			Vector2D vp2 = new Vector2D(point, nextPathPoint);
			
			// Get the shortest angle for the joint, from the first edge to the second.
			double jointAngle = MathExtended.getAngularChange(vj1, vj2);
			
			// Get the angle from the first joint edge to each path edge.
			double pathAngle1 = MathExtended.getAngularChange(vj1, vp1);
		}

		return false;
	}

	public static double getShortestDistanceFromPointToLine(Point2D p, Line2D l) {
		// Get the vector form of the line.
		Vector2D lineVector = new Vector2D(l);

		// Get the angle of the vector.
		double angle = lineVector.getAngle();

		// Rotate the point and line by -angle such that the line vector points
		// in the direction of the positive x-axis.
		Point2D p2 = rotate(p, -angle);
		Line2D l2 = rotate(l, -angle);

		// Check if the point lies to the left of the line.
		// Note that the first point of the line is on the left.
		if (p2.getX() < l2.getX1()) {
			// Return the distance to the left endpoint.
			return p2.distance(l2.getP1());
		}

		// Check if the point lies to the right of the line.
		// Note that the second point of the line is on the right.
		if (p2.getX() > l2.getX2()) {
			// Return the distance to the right endpoint.
			return p2.distance(l2.getP2());
		}

		// Return the difference in y-coordinates, using any point on the line.
		return Math.abs(p2.getY() - l2.getY1());
	}

	public static boolean collinear(Line2D l1, Line2D l2) {
		int i = 0;

		if (pointOnLine(l1.getP1(), l2) != PointOnLineResult.NONE) {
			i++;
		}

		if (pointOnLine(l1.getP2(), l2) != PointOnLineResult.NONE) {
			i++;
		}

		if (pointOnLine(l2.getP1(), l1) != PointOnLineResult.NONE) {
			i++;
		}

		if (pointOnLine(l2.getP2(), l1) != PointOnLineResult.NONE) {
			i++;
		}

		// Return true if at least two endpoints lie on the other line.
		return i >= 2;
	}

	/**
	 * Checks if three points are collinear.
	 * 
	 * @param p1
	 * @param p2
	 * @param p3
	 * @return true if the points are collinear, false otherwise
	 */
	public static boolean collinear(Point2D p1, Point2D p2, Point2D p3) {
		// Stop if any two points are equal.
		if (p1.equals(p2) || p1.equals(p3) || p2.equals(p3)) {
			return true;
		}

		// Get the vector from p1 to p2.
		Vector2D v12 = new Vector2D(p1, p2);

		// Get the vector from p2 to p3.
		Vector2D v23 = new Vector2D(p2, p3);

		// Check if the angles of the vectors are equal.
		return v12.getAngle() == v23.getAngle();
	}

	public static LineIntersectionResult lineIntersectsLine(Line2D l1, Line2D l2) {
		// Check if the lines do not intersect.
		// TODO: Check the functionality of this function and possibly replace
		// it.
		if (!l1.intersectsLine(l2)) {
			return LineIntersectionResult.NONE;
		}

		// Check if the lines are collinear.
		if (collinear(l1, l2)) {
			return LineIntersectionResult.COLLINEAR;
		}

		// Check if the an endpoint of one line lies on the other line.
		PointOnLineResult r1 = pointOnLine(l1.getP1(), l2);
		PointOnLineResult r2 = pointOnLine(l1.getP2(), l2);
		PointOnLineResult r3 = pointOnLine(l2.getP1(), l1);
		PointOnLineResult r4 = pointOnLine(l2.getP2(), l1);

		if (r1 == PointOnLineResult.AT_ENDPOINT
				|| r2 == PointOnLineResult.AT_ENDPOINT
				|| r3 == PointOnLineResult.AT_ENDPOINT
				|| r4 == PointOnLineResult.AT_ENDPOINT) {
			return LineIntersectionResult.JOINT;
		} else if (r1 == PointOnLineResult.WITHIN_LINE
				|| r2 == PointOnLineResult.WITHIN_LINE
				|| r3 == PointOnLineResult.WITHIN_LINE
				|| r4 == PointOnLineResult.WITHIN_LINE) {
			return LineIntersectionResult.A_TOUCHES_B;
		}

		return LineIntersectionResult.CROSS;
	}

	public static boolean strictLineIntersectsLine(Line2D l1, Line2D l2) {
		return lineIntersectsLine(l1, l2) == LineIntersectionResult.CROSS;
	}

	public static boolean strictLineIntersectsPath(Line2D l, Path p) {
		List<Line2D> pathEdges = p.getEdges();

		// For each path segment, check if it intersects with the line.
		for (int i = 0; i < pathEdges.size(); i++) {
			Line2D edge = pathEdges.get(i);

			// Check if the line intersects with the path edge.
			if (strictLineIntersectsLine(edge, l)) {
				return true;
			}

			// Check if the line crosses a joint in the path.
			if (i != pathEdges.size() - 1) {
				// Get the second endpoint of the current path segment.
				Point2D endpoint = edge.getP2();

				// Check if the second endpoint of the current path segment lies
				// within the line.
				PointOnLineResult r = pointOnLine(endpoint, l);

				if (r == PointOnLineResult.WITHIN_LINE) {
					return true;
				}
			}
		}

		return false;
	}

	public static boolean strictPathIntersectsPath(Path p1, Path p2) {
		List<Line2D> p1Edges = p1.getEdges();

		// For each segment of the first path, check if it intersects with the
		// second path.
		for (int i = 0; i < p1Edges.size(); i++) {
			Line2D edge = p1Edges.get(i);

			// Check if the path edges intersect.
			if (strictLineIntersectsPath(edge, p2)) {
				return true;
			}

			// Check if a joint in the first path intersects with the second
			// path.
			if (i != p1Edges.size() - 1) {
				// Get the second endpoint of the current path segment.
				Point2D endpoint = edge.getP2();

				// Check if the endpoint lies within the second path.
				// Note that the 'within line' result means that the point lies
				// within the path, excluding the path's two endpoints.
				if (pointOnPath(endpoint, p2) == PointOnLineResult.WITHIN_LINE) {
					return true;
				}
			}
		}

		return false;
	}

	/**
	 * Computes the intersection points between a circle and a line.
	 * 
	 * @param centre
	 * @param radius
	 * @param l
	 * @param allowEndPoints
	 * @return intersection points
	 */
	public static List<Point2D> strictGetCircleLineIntersectionPoints(
			Point2D centre, double radius, Line2D l, boolean allowEndPoints) {
		List<Point2D> intersectionPoints = new ArrayList<Point2D>();

		// Get the vector form of the line.
		Vector2D lineVector = new Vector2D(l);

		// Get the angle of the vector.
		double angle = lineVector.getAngle();

		// Rotate the centre of the circle and the line by -angle such that the
		// line vector points in the direction of the positive x-axis.
		Point2D p = rotate(centre, -angle);
		Line2D l2 = rotate(l, -angle);

		/*
		 * After algebraic manipulation, we get the x-coordinates of the
		 * intersection points as: x = p.x +/- sqrt(radius^2 - (l2.y - p.y)^2).
		 */

		// Store [l2.y - p.y] as a. Note that l2.y1 = l2.y2.
		double a = l2.getY1() - p.getY();

		// Store [radius^2 - a^2] as b.
		double b = (radius * radius) - (a * a);

		// Stop if b <= 0, which means that the circle does not intersect the
		// infinite line defined by l. If b = 0 then the circle touches the
		// line.
		if (b <= 0) {
			return intersectionPoints;
		}

		// Store [p.x +/- sqrt(b)] as x1 and x2.
		double x1 = p.getX() + Math.sqrt(b);
		double x2 = p.getX() - Math.sqrt(b);

		// Add the intersection point given by x1 if x1 lies inside the range
		// given by l2. We use a strict inequality if we disallow end-points.
		if (inRange(x1, l2.getX1(), l2.getX2(), !allowEndPoints)) {
			Point2D p1 = new Point2D.Double(x1, l2.getY1());

			// Rotate back to the original orientation.
			intersectionPoints.add(rotate(p1, angle));
		}

		// Add the intersection point given by x2.
		if (inRange(x2, l2.getX1(), l2.getX2(), !allowEndPoints)) {
			Point2D p2 = new Point2D.Double(x2, l2.getY1());

			// Rotate back to the original orientation.
			intersectionPoints.add(rotate(p2, angle));
		}

		return intersectionPoints;
	}

	public static List<Point2D> strictGetCirclePathIntersectionPoints(
			Point2D centre, double radius, Path path) {
		List<Point2D> intersectionPoints = new ArrayList<Point2D>();

		List<Line2D> pathEdges = path.getEdges();

		// For each path segment, check if it intersects with the line.
		for (int i = 0; i < pathEdges.size(); i++) {
			Line2D edge = pathEdges.get(i);

			// Get the intersection points between the circle and the edge. Note
			// that we need to allow end points so that intersections through
			// corners of the obstacle are included.
			List<Point2D> points = strictGetCircleLineIntersectionPoints(
					centre, radius, edge, true);

			// Add all new intersection points.
			for (Point2D point : points) {
				if (!ListFunctions.contains(point, points, 0.00001, 0.00001)) {
					intersectionPoints.add(point);
				}
			}
		}

		return intersectionPoints;
	}

	public static boolean strictCircleIntersectsPath(Point2D centre,
			double radius, Path path) {
		List<Line2D> pathEdges = path.getEdges();

		// For each path segment, check if it intersects with the line.
		for (int i = 0; i < pathEdges.size(); i++) {
			Line2D edge = pathEdges.get(i);

			// Check if the circle intersects with the path edge. Note that we
			// do not count touching the edge.
			if (getShortestDistanceFromPointToLine(centre, edge) < radius) {
				return true;
			}
		}

		return false;
	}

	public static boolean strictPathIntersectsItself(Path p) {
		List<Line2D> edges = p.getEdges();

		for (int i = 1; i < p.points.size() - 1; i++) {
			// Get the subpath with indices 0 and i.
			Path subpath = p.getSubpath(0, i);

			// Get the next edge in the path.
			Line2D edge = edges.get(i);

			// Check if the edge intersects the subpath.
			if (strictLineIntersectsPath(edge, subpath)) {
				return true;
			}

			// Check if a joint in the path intersects the subpath.
			if (i != edges.size() - 1) {
				// Get the second endpoint of the current path segment.
				Point2D endpoint = edge.getP2();

				// Check if the endpoint lies within the second path.
				// Note that this also checks for overlap in the path segments.
				if (pointOnPath(endpoint, subpath) == PointOnLineResult.WITHIN_LINE) {
					return true;
				}
			}
		}

		return false;
	}

	/**
	 * Gets the intersection point between two infinite lines. The first line is
	 * defined as r1 = p1 + (m * v1) where m is any number, and similarly for
	 * the second line. If the lines are parallel then the result is null.
	 * 
	 * @param p1
	 * @param v1
	 * @param p2
	 * @param v2
	 * @return intersection point
	 */
	public static Point2D getExtendedIntersectionPoint(Point2D p1, Vector2D v1,
			Point2D p2, Vector2D v2) {
		// Get a second point on each line.
		Point2D q1 = v1.addPoint(p1);
		Point2D q2 = v2.addPoint(p2);

		double x1 = p1.getX();
		double y1 = p1.getY();
		double x2 = q1.getX();
		double y2 = q1.getY();
		double x3 = p2.getX();
		double y3 = p2.getY();
		double x4 = q2.getX();
		double y4 = q2.getY();

		double d = ((x1 - x2) * (y3 - y4)) - ((y1 - y2) * (x3 - x4));

		// If the lines are parallel.
		if (d == 0) {
			return null;
		}

		double a = (x1 * y2) - (y1 * x2);

		double b = (x3 * y4) - (y3 * x4);

		double x = ((a * (x3 - x4)) - ((x1 - x2) * b)) / d;
		double y = ((a * (y3 - y4)) - ((y1 - y2) * b)) / d;

		return new Point2D.Double(x, y);
	}

	/**
	 * Gets the intersection point between two finite lines. The first line is
	 * defined as the line between p1 and p1 + v1, and similarly for the second
	 * line. If the lines are parallel then the result is null.
	 * 
	 * @param p1
	 * @param v1
	 * @param p2
	 * @param v2
	 * @return intersection point
	 */
	public static Point2D getIntersectionPoint(Point2D p1, Vector2D v1,
			Point2D p2, Vector2D v2) {
		// Get the extended intersection point.
		Point2D c = getExtendedIntersectionPoint(p1, v1, p2, v2);

		// Get corresponding lines.
		Line2D l1 = getLine(p1, v1);
		Line2D l2 = getLine(p2, v2);

		// If c lies on both lines, then it is valid, otherwise return null.
		if (c != null && loosePointOnLine(c, l1) && loosePointOnLine(c, l2)) {
			return c;
		}

		return null;
	}

	public static Point2D getIntersectionPoint(Line2D l1, Line2D l2) {
		Point2D p1 = l1.getP1();
		Vector2D v1 = new Vector2D(l1);
		Point2D p2 = l2.getP1();
		Vector2D v2 = new Vector2D(l2);

		return getIntersectionPoint(p1, v1, p2, v2);
	}

	public static Line2D getLine(Point2D p, Vector2D v) {
		return new Line2D.Double(p.getX(), p.getY(), p.getX() + v.x, p.getY()
				+ v.y);
	}

	public static Point2D getCartesian(double radius, double rads) {
		double x = radius * Math.cos(rads);
		double y = radius * Math.sin(rads);

		return new Point2D.Double(x, y);
	}

	/**
	 * Returns a new point equivalent to p+t.
	 * 
	 * @param p
	 * @param t
	 * @return translated point
	 */
	public static Point2D translate(Point2D p, Point2D t) {
		return new Point2D.Double(p.getX() + t.getX(), p.getY() + t.getY());
	}

	/**
	 * Translates point p by position vector t, returning a new point.
	 * 
	 * @param p
	 * @param t
	 * @return translated point
	 */
	public static Point2D translate(Point2D p, Vector2D t) {
		return new Point2D.Double(p.getX() + t.x, p.getY() + t.y);
	}

	/**
	 * Rotates point p about the origin.
	 * 
	 * @param p
	 * @param rads
	 * @return rotated point
	 */
	public static Point2D rotate(Point2D p, double rads) {
		double x = (p.getX() * Math.cos(rads)) - (p.getY() * Math.sin(rads));
		double y = (p.getX() * Math.sin(rads)) + (p.getY() * Math.cos(rads));

		return new Point2D.Double(x, y);
	}

	/**
	 * Rotates vector v about the origin.
	 * 
	 * @param p
	 * @param rads
	 * @return rotated point
	 */
	public static Vector2D rotate(Vector2D v, double rads) {
		double x = (v.x * Math.cos(rads)) - (v.y * Math.sin(rads));
		double y = (v.x * Math.sin(rads)) + (v.y * Math.cos(rads));

		return new Vector2D(x, y);
	}

	/**
	 * Rotates point p about pivotPoint.
	 * 
	 * @param p
	 * @param pivotPoint
	 * @param rads
	 * @return rotated point
	 */
	public static Point2D rotate(Point2D p, Point2D pivotPoint, double rads) {
		// Get the vector formed between pivotPoint and p.
		Vector2D v = new Vector2D(pivotPoint, p);

		// Rotate the vector.
		Vector2D rotatedVector = rotate(v, rads);

		// Add the pivot point to the vector.
		return rotatedVector.addPoint(pivotPoint);
	}

	/**
	 * Rotates a line about the origin by rotating its two endpoints separately.
	 * 
	 * @param l
	 * @param rads
	 * @return
	 */
	public static Line2D rotate(Line2D l, double rads) {
		Point2D p1 = rotate(l.getP1(), rads);
		Point2D p2 = rotate(l.getP2(), rads);

		return new Line2D.Double(p1.getX(), p1.getY(), p2.getX(), p2.getY());
	}

	public static List<Point2D> approximateArc(int numberOfInnerVertices,
			double startRads, double rads, double radius) {
		List<Point2D> l = new ArrayList<Point2D>();

		// If the circle has zero radius, then just return the zero point.
		if (radius == 0) {
			l.add(new Point2D.Double(0, 0));

			return l;
		}

		Point2D p = getCartesian(radius, startRads);

		// Add the first vertex.
		l.add(p);

		double mag = Math.abs(rads);

		if (mag > 2 * Math.PI) {
			Log.warning("Cannot polygonise arc with angular distance greater than one revolution.");

			rads = rads > 0 ? Math.PI : -Math.PI;
		}

		// Check if approximating an arc is not possible.
		if (numberOfInnerVertices == 0
				|| (mag >= Math.PI && numberOfInnerVertices == 2)
				|| (mag == 2 * Math.PI && numberOfInnerVertices <= 3)) {
			Log.error("Cannot polygonise arc due to insufficient number of verticies.");

			return null;
		}

		// This point represents a point on the arc which lies in-between two
		// result vertices.
		Point2D previousM = p;

		// Calculate the tangent vector.
		Vector2D previousTangent = Vector2D.getTangentVector(previousM.getX(),
				previousM.getY(), true);

		// Calculate the angular change at each inner vertex.
		double a = rads / numberOfInnerVertices;

		// Add all except for the last inner vertex.
		for (int i = 1; i < numberOfInnerVertices; i++) {
			// This point represents a point on the arc which lies in-between
			// two result vertices.
			Point2D m = getCartesian(radius, startRads + (a * i));

			Vector2D tangent = Vector2D.getTangentVector(m.getX(), m.getY(),
					true);

			// Add the next vertex as the intersection of the current and
			// previous tangents.
			Point2D v = getExtendedIntersectionPoint(previousM,
					previousTangent, m, tangent);

			if (v == null) {
				Log.warning("Invalid intermediate point.");
			} else {
				l.add(v);
			}

			previousM = m;
			previousTangent = tangent;
		}

		// Get the last vertex and its tangent.
		Point2D q = getCartesian(radius, startRads + rads);
		Vector2D qTangent = Vector2D.getTangentVector(q.getX(), q.getY(), true);

		// Add the last inner vertex as the intersection of the penultimate and
		// last tangents.
		Point2D v = getExtendedIntersectionPoint(previousM, previousTangent, q,
				qTangent);

		if (v == null) {
			Log.warning("Invalid intermediate point.");
		} else {
			l.add(v);
		}

		// Add the last vertex.
		l.add(q);

		return l;
	}

	/**
	 * Gets the fraction along the line l at which point p lies. p should lie on
	 * the line l.
	 * 
	 * @param p
	 * @param l
	 * @return fraction [0,1]
	 */
	public static double getFractionAlongLine(Point2D p, Line2D l) {
		// Rotate the line and point such that the line is horizontal.
		Vector2D v = new Vector2D(l);
		double rads = v.getAngle();
		Point2D pR = rotate(p, -rads);
		Line2D lR = rotate(l, -rads);

		// The point should lie on the (extended) line.
		if (!approxEqual(pR.getY(), lR.getY1(), 0.00001, 0.00001)) {
			Log.warning("Point does not lie on the line.");
		}

		double distanceToP1 = pR.distance(lR.getP1());

		return distanceToP1 / (length(l));
	}

}
