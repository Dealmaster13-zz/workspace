package uk.ac.cam.oda22.coverage.simple;

import java.awt.geom.Point2D;
import java.util.ArrayList;
import java.util.List;

import uk.ac.cam.oda22.core.logging.Log;
import uk.ac.cam.oda22.core.robots.actions.simple.SimpleMoveDirection;

/**
 * @author Oliver
 * 
 */
public class RoomCellIndex {

	public int x;

	public int y;

	/**
	 * @param x
	 * @param y
	 */
	public RoomCellIndex(int x, int y) {
		this.x = x;
		this.y = y;
	}

	public RoomCellIndex(Point2D p, double cellSize) {
		this.x = (int) Math.round(p.getX() / cellSize) - 1;
		this.y = (int) Math.round(p.getY() / cellSize) - 1;
	}

	public RoomCellIndex(RoomCellIndex c) {
		this.x = c.x;
		this.y = c.y;
	}

	public Point2D getPosition(double cellSize) {
		return new Point2D.Double((this.x + 0.5) * cellSize, (this.y + 0.5)
				* cellSize);
	}

	public List<RoomCellIndex> getAdjacentCells() {
		List<RoomCellIndex> l = new ArrayList<RoomCellIndex>();
		l.add(new RoomCellIndex(this.x - 1, this.y));
		l.add(new RoomCellIndex(this.x, this.y + 1));
		l.add(new RoomCellIndex(this.x + 1, this.y));
		l.add(new RoomCellIndex(this.x, this.y - 1));
		return l;
	}

	/**
	 * Gets the direction to an adjacent cell.
	 * 
	 * @param c
	 * @return direction to the cell if it is adjacent, null otherwise
	 */
	public SimpleMoveDirection getDirectionToAdjacentCell(RoomCellIndex c) {
		int xChange = c.x - this.x;
		int yChange = c.y - this.y;

		if (xChange == 0) {
			if (Math.abs(yChange) == 1) {
				return yChange == 1 ? SimpleMoveDirection.UP
						: SimpleMoveDirection.DOWN;
			}
		} else if (yChange == 0) {
			if (Math.abs(xChange) == 1) {
				return xChange == 1 ? SimpleMoveDirection.RIGHT
						: SimpleMoveDirection.LEFT;
			}
		}

		Log.debug("Cell is not adjacent.");

		return null;
	}

	@Override
	public boolean equals(Object o) {
		if (o == null) {
			return false;
		}

		RoomCellIndex c = (RoomCellIndex) o;

		return this.x == c.x && this.y == c.y;
	}

}
