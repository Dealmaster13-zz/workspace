package uk.ac.cam.oda22.core.astar;

import java.awt.geom.Point2D;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.List;

import uk.ac.cam.oda22.core.environment.VisibilityGraph;
import uk.ac.cam.oda22.core.environment.VisibilityGraphEdge;
import uk.ac.cam.oda22.core.environment.VisibilityGraphNode;

/**
 * @author Oliver
 *
 */
public class AStarGraph {

	public final List<AStarNode> nodes;
	
	public final List<AStarEdge> edges;
	
	public final VisibilityGraph visibilityGraph;
	
	public AStarGraph(VisibilityGraph g) {
		this.nodes = new ArrayList<AStarNode>();
		this.edges = new ArrayList<AStarEdge>();
		this.visibilityGraph = g;

		// Create all of the A* nodes.
		for (VisibilityGraphNode node : g.nodes) {
			AStarNode aStarNode = new AStarNode(node.vertex);

			this.nodes.add(aStarNode);

			nodeMapping.put(node, aStarNode);
		}

		// Create all of the A* edges.
		for (VisibilityGraphEdge edge : g.edges) {
			AStarNode aStarNode1 = nodeMapping.get(edge.startNode);
			AStarNode aStarNode2 = nodeMapping.get(edge.endNode);

			double edgeCost = aStarNode1.distance(aStarNode2.p);
			
			AStarEdge aStarEdge = new AStarEdge(aStarNode1, aStarNode2, edgeCost);
		}
	}

	/**
	 * Gets the node at a given point.
	 * 
	 * @param p
	 * @return node if exists at point p, null otherwise
	 */
	private VisibilityGraphNode getNode(Point2D p) {
		// Check if any node has the same point p.
		for (VisibilityGraphNode n : this.nodes) {
			if (n.vertex.equals(p)) {
				return n;
			}
		}

		return null;
	}
	
}
