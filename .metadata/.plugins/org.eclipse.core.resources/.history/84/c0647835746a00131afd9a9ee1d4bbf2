package uk.ac.cam.oda22.core.astar;

import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

/**
 * @author Oliver
 *
 */
public class AStarPathfinding {

	public static List<AStarNode> getShortestPath(AStarNode source, AStarNode destination, List<AStarNode> nodes) {
		List<AStarNode> path = new LinkedList<AStarNode>();
		
		//Initialise the nodes.
		for (AStarNode node : nodes) {
			node.predecessor = null;
			node.f = Double.POSITIVE_INFINITY;
			node.g = node.calculateHeuristic(destination.p);
		}
		
		// Set the source's f cost to 0.
		source.f = 0;
		
		// Create a queue of the nodes to check neighbours.
		List<AStarNode> q = new LinkedList<AStarNode>();
		q.add(source);
		
		while (!q.isEmpty()) {
			AStarNode current = getLowestCostNode(nodes);
		}
		
		return path;
	}
	
	public static AStarNode getLowestCostNode(List<AStarNode> nodes) {
		AStarNode lowestCostNode = null;
		double lowestH = Double.POSITIVE_INFINITY;
		
		for (AStarNode node : nodes) {
			if (node.f + node.g < lowestH) {
				lowestCostNode = node;
				
				lowestH = node.f + node.g;
			}
		}
		
		return lowestCostNode;
	}
	
}
