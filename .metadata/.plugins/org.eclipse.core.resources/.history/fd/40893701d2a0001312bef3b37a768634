package uk.ac.cam.oda22.coverage.simple;

import java.util.ArrayList;
import java.util.List;

/**
 * @author Oliver
 * 
 */
public class SimpleCoverageRouteNode {

	/**
	 * The room cell index of the node.
	 */
	public final RoomCellIndex index;

	/**
	 * The list of nodes which come before this node.
	 */
	public final List<SimpleCoverageRouteNode> previousNodes;

	/**
	 * The re-coverage count which corresponds to the previous node list.
	 */
	public final Integer recoverageCount;

	/**
	 * The status of whether or not the robot is recovering tiles at this stage.
	 */
	public final boolean recovering;

	public SimpleCoverageRouteNode(RoomCellIndex index) {
		this.index = index;

		this.previousNodes = new ArrayList<SimpleCoverageRouteNode>();
		this.recoverageCount = ;
	}

	public void addNextNode(SimpleCoverageRouteNode n) {
		this.previousNodes.add(n);
	}

	private static boolean isRevisited(RoomCellIndex index,
			List<SimpleCoverageRouteNode> l) {
		for (SimpleCoverageRouteNode n : l) {
			if (n.index.equals(index)) {
				return true;
			}
		}

		return false;
	}

}
